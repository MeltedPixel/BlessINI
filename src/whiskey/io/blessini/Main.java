/*
* This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 
* International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ 
* or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 */
 
package whiskey.io.blessini;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.ini4j.Config;
import org.ini4j.Ini;
import org.ini4j.InvalidFileFormatException;
import org.ini4j.Wini;

/**
 *
 * @author Kayaba
 */
public class Main extends javax.swing.JFrame {
    // DEBUG ---
    public static final Boolean isDebugRunning = true;
    // END-DEBUG ---
    
    // GENERAL-STATEMENTS ---
    public static Ini iReadini;
    public static Ini iBaseEngine;
    public static Ini iBaseInput;
    public static Ini iBaseSystem;
    public static Boolean fovFix;
    public static Boolean mouseSmooth;
    public static Boolean lookupFix;
    public static String sIniFileName = "settings.ini";
    public static String sIniFileLocation = "";
    public static final String sWorkingPath = GeneralClasses.getWorkingDirectory();
    // END-GENERAL-STATEMENTS ---
    
    // CREATE MAIN FORM
    public Main() {
        initComponents();
        
        setLocationRelativeTo(null);
        setBackground(new Color(0, 0, 0, 0));
        setTitle("Bless Online ini Editor by Reign - [NA]Lilyanthes");
        
        DragListener drag = new DragListener();
        addMouseListener(drag);
        addMouseMotionListener(drag);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_close = new javax.swing.JButton();
        btn_minimize = new javax.swing.JButton();
        headerText = new javax.swing.JLabel();
        directoryAnchor = new javax.swing.JTextField();
        btn_set = new javax.swing.JButton();
        txt_notice0 = new javax.swing.JLabel();
        txt_notice1 = new javax.swing.JLabel();
        title_frameRate = new javax.swing.JLabel();
        txt_frameRate = new javax.swing.JLabel();
        fld_frameRate = new javax.swing.JTextField();
        txt_or = new javax.swing.JLabel();
        txt_minSmoothedFrame = new javax.swing.JLabel();
        fld_minSmoothedFrame = new javax.swing.JTextField();
        txt_maxSmoothedFrame = new javax.swing.JLabel();
        fld_maxSmoothedFrame = new javax.swing.JTextField();
        title_general = new javax.swing.JLabel();
        txt_staticDecals = new javax.swing.JLabel();
        fld_staticDecals = new javax.swing.JTextField();
        txt_dynamicDecals = new javax.swing.JLabel();
        fld_dynamicDecals = new javax.swing.JTextField();
        txt_disablePhysX = new javax.swing.JLabel();
        fld_disablePhysX = new javax.swing.JTextField();
        txt_poolSize = new javax.swing.JLabel();
        fld_poolSize = new javax.swing.JTextField();
        txt_memoryMargin = new javax.swing.JLabel();
        fld_memoryMargin = new javax.swing.JTextField();
        txt_threadedShader = new javax.swing.JLabel();
        fld_threadedShader = new javax.swing.JTextField();
        title_optional = new javax.swing.JLabel();
        txt_motionBlur = new javax.swing.JLabel();
        fld_motionBlur = new javax.swing.JTextField();
        txt_distortion = new javax.swing.JLabel();
        fld_distortion = new javax.swing.JTextField();
        txt_lightEnv = new javax.swing.JLabel();
        fld_lightEnv = new javax.swing.JTextField();
        txt_fogVolumes = new javax.swing.JLabel();
        fld_fogVolumes = new javax.swing.JTextField();
        txt_staticDecalsBase = new javax.swing.JLabel();
        fld_staticDecalsBase = new javax.swing.JTextField();
        btn_fov = new javax.swing.JButton();
        btn_mouseSmooth = new javax.swing.JButton();
        btn_vertMouseFix = new javax.swing.JButton();
        btn_restore = new javax.swing.JButton();
        btn_save = new javax.swing.JButton();
        body_background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_close.setBorderPainted(false);
        btn_close.setContentAreaFilled(false);
        btn_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeActionPerformed(evt);
            }
        });
        getContentPane().add(btn_close, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 6, 20, 20));

        btn_minimize.setBorderPainted(false);
        btn_minimize.setContentAreaFilled(false);
        btn_minimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_minimizeActionPerformed(evt);
            }
        });
        getContentPane().add(btn_minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 6, 20, 20));

        headerText.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        headerText.setForeground(new java.awt.Color(255, 255, 255));
        headerText.setText("Bless Online ini Editor by Reign - [NA]Lilyanthes");
        getContentPane().add(headerText, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 8, -1, -1));

        directoryAnchor.setForeground(new java.awt.Color(255, 255, 255));
        directoryAnchor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        directoryAnchor.setText("Please find/select your bless game exe");
        directoryAnchor.setOpaque(false);
        getContentPane().add(directoryAnchor, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 530, 20));

        btn_set.setText("Set");
        btn_set.setToolTipText("Set your game directory");
        btn_set.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_setActionPerformed(evt);
            }
        });
        getContentPane().add(btn_set, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 470, -1, 20));

        txt_notice0.setForeground(new java.awt.Color(255, 255, 255));
        txt_notice0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_notice0.setText("NOTCE: Changes to your INI are unofficial. All changes are found by community members like you!");
        getContentPane().add(txt_notice0, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 530, -1));

        txt_notice1.setForeground(new java.awt.Color(255, 255, 102));
        txt_notice1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_notice1.setText("NOTICE: The Game exe is typically found in \\steamapps\\common\\Bless Online\\Binaries\\Win64\\");
            getContentPane().add(txt_notice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 454, 530, -1));

            title_frameRate.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
            title_frameRate.setForeground(new java.awt.Color(255, 255, 255));
            title_frameRate.setText("FrameRate Cap");
            getContentPane().add(title_frameRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));

            txt_frameRate.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_frameRate.setForeground(new java.awt.Color(255, 255, 255));
            txt_frameRate.setText("bSmoothFrameRate =");
            txt_frameRate.setToolTipText("Turn off the 62 FPS framecap. Recommended = False");
            getContentPane().add(txt_frameRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, -1));

            fld_frameRate.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_frameRate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_frameRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 118, 60, -1));

            txt_or.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
            txt_or.setForeground(new java.awt.Color(255, 255, 255));
            txt_or.setText("OR");
            getContentPane().add(txt_or, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 120, -1, -1));

            txt_minSmoothedFrame.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_minSmoothedFrame.setForeground(new java.awt.Color(255, 255, 255));
            txt_minSmoothedFrame.setText("MinSmoothedFrameRate =");
            txt_minSmoothedFrame.setToolTipText("If bSmoothFrameRate = True. Set Min/Max as needed");
            getContentPane().add(txt_minSmoothedFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, -1, -1));

            fld_minSmoothedFrame.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_minSmoothedFrame.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_minSmoothedFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 118, 60, -1));

            txt_maxSmoothedFrame.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_maxSmoothedFrame.setForeground(new java.awt.Color(255, 255, 255));
            txt_maxSmoothedFrame.setText("MaxSmoothedFrameRate =");
            txt_maxSmoothedFrame.setToolTipText("If bSmoothFrameRate = True. Set Min/Max as needed");
            getContentPane().add(txt_maxSmoothedFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 120, -1, -1));

            fld_maxSmoothedFrame.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_maxSmoothedFrame.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_maxSmoothedFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(644, 118, 60, -1));

            title_general.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
            title_general.setForeground(new java.awt.Color(255, 255, 255));
            title_general.setText("General Performance Improvements");
            getContentPane().add(title_general, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));

            txt_staticDecals.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_staticDecals.setForeground(new java.awt.Color(255, 255, 255));
            txt_staticDecals.setText("bStaticDecalsEnabled =");
            txt_staticDecals.setToolTipText("Recommended = False");
            getContentPane().add(txt_staticDecals, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, -1));

            fld_staticDecals.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_staticDecals.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_staticDecals, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 198, 60, -1));

            txt_dynamicDecals.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_dynamicDecals.setForeground(new java.awt.Color(255, 255, 255));
            txt_dynamicDecals.setText("bDynamicDecalsEnabled =");
            txt_dynamicDecals.setToolTipText("Recommended = False");
            getContentPane().add(txt_dynamicDecals, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, -1, -1));

            fld_dynamicDecals.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_dynamicDecals.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_dynamicDecals, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 227, 60, -1));

            txt_disablePhysX.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_disablePhysX.setForeground(new java.awt.Color(255, 255, 255));
            txt_disablePhysX.setText("bDisablePhysXHardwareSupport =");
            txt_disablePhysX.setToolTipText("Recommended = False");
            getContentPane().add(txt_disablePhysX, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, -1, -1));

            fld_disablePhysX.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_disablePhysX.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_disablePhysX, new org.netbeans.lib.awtextra.AbsoluteConstraints(238, 257, 60, -1));

            txt_poolSize.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_poolSize.setForeground(new java.awt.Color(255, 255, 255));
            txt_poolSize.setText("PoolSize =");
            txt_poolSize.setToolTipText("Based on your GPU Memory: 512, 1024, 2048, 4096 (Don't go higher then 4gb)");
            getContentPane().add(txt_poolSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, -1, -1));

            fld_poolSize.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_poolSize.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_poolSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 288, 60, -1));

            txt_memoryMargin.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_memoryMargin.setForeground(new java.awt.Color(255, 255, 255));
            txt_memoryMargin.setText("MemoryMargin =");
            txt_memoryMargin.setToolTipText("Recommended = 256");
            getContentPane().add(txt_memoryMargin, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, -1, -1));

            fld_memoryMargin.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_memoryMargin.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_memoryMargin, new org.netbeans.lib.awtextra.AbsoluteConstraints(137, 318, 60, -1));

            txt_threadedShader.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_threadedShader.setForeground(new java.awt.Color(255, 255, 255));
            txt_threadedShader.setText("ThreadedShaderCompileThreshold =");
            txt_threadedShader.setToolTipText("Based on the number of physical CPU cores, not threads your computer has");
            getContentPane().add(txt_threadedShader, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, -1, -1));

            fld_threadedShader.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_threadedShader.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_threadedShader, new org.netbeans.lib.awtextra.AbsoluteConstraints(252, 348, 60, -1));

            title_optional.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
            title_optional.setForeground(new java.awt.Color(255, 255, 255));
            title_optional.setText("Optional Performance Boosts");
            getContentPane().add(title_optional, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 160, 260, 20));

            txt_motionBlur.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_motionBlur.setForeground(new java.awt.Color(255, 255, 255));
            txt_motionBlur.setText("MotionBlur = ");
            txt_motionBlur.setToolTipText("Its motionblur! Who likes it anyway! Recommended = False");
            getContentPane().add(txt_motionBlur, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 200, -1, -1));

            fld_motionBlur.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_motionBlur.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_motionBlur, new org.netbeans.lib.awtextra.AbsoluteConstraints(544, 197, 60, -1));

            txt_distortion.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_distortion.setForeground(new java.awt.Color(255, 255, 255));
            txt_distortion.setText("Distortion = ");
            txt_distortion.setToolTipText("Disables distortion visual effect. Recommended = False");
            getContentPane().add(txt_distortion, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 230, -1, -1));

            fld_distortion.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_distortion.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_distortion, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 228, 60, -1));

            txt_lightEnv.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_lightEnv.setForeground(new java.awt.Color(255, 255, 255));
            txt_lightEnv.setText("LightEnvironmentShadows = ");
            txt_lightEnv.setToolTipText("Disables Costly Enviromental light shadows. Recommended = False");
            getContentPane().add(txt_lightEnv, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 260, -1, -1));

            fld_lightEnv.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_lightEnv.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_lightEnv, new org.netbeans.lib.awtextra.AbsoluteConstraints(634, 257, 60, -1));

            txt_fogVolumes.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_fogVolumes.setForeground(new java.awt.Color(255, 255, 255));
            txt_fogVolumes.setText("FogVolumes = ");
            txt_fogVolumes.setToolTipText("Disables Foggy areas you come across in caves. Recommended = False");
            getContentPane().add(txt_fogVolumes, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 290, -1, -1));

            fld_fogVolumes.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_fogVolumes.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_fogVolumes, new org.netbeans.lib.awtextra.AbsoluteConstraints(555, 288, 60, -1));

            txt_staticDecalsBase.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            txt_staticDecalsBase.setForeground(new java.awt.Color(255, 255, 255));
            txt_staticDecalsBase.setText("StaticDecals = ");
            txt_staticDecalsBase.setToolTipText("Disables grime on top of textures. Can also make them look like poop though. Recommended = Either Way");
            getContentPane().add(txt_staticDecalsBase, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 320, -1, -1));

            fld_staticDecalsBase.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            fld_staticDecalsBase.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            getContentPane().add(fld_staticDecalsBase, new org.netbeans.lib.awtextra.AbsoluteConstraints(554, 317, 60, -1));

            btn_fov.setText("FOV & Ultrawide Fix");
            btn_fov.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btn_fovActionPerformed(evt);
                }
            });
            getContentPane().add(btn_fov, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 370, -1, -1));

            btn_mouseSmooth.setText("Mouse Smoothing");
            btn_mouseSmooth.setToolTipText("Turn on/off Mouse Smoothing");
            btn_mouseSmooth.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btn_mouseSmoothActionPerformed(evt);
                }
            });
            getContentPane().add(btn_mouseSmooth, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 370, -1, -1));

            btn_vertMouseFix.setText("Vertical Mouse Fix");
            btn_vertMouseFix.setToolTipText("Fix for mouse vertical movement not being the same as horizontal");
            btn_vertMouseFix.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btn_vertMouseFixActionPerformed(evt);
                }
            });
            getContentPane().add(btn_vertMouseFix, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 370, -1, -1));

            btn_restore.setText("Restore Defaults");
            btn_restore.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btn_restoreActionPerformed(evt);
                }
            });
            getContentPane().add(btn_restore, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, -1, -1));

            btn_save.setText("Save Settings");
            btn_save.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btn_saveActionPerformed(evt);
                }
            });
            getContentPane().add(btn_save, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 420, 110, -1));

            body_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/whiskey/io/blessini/images/background.png"))); // NOI18N
            getContentPane().add(body_background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 500));

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void btn_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeActionPerformed
        // Close Application

        int closeDialogResult = JOptionPane.showConfirmDialog (null, "Did you remember to save? Clicking yes will close the application.","Warning", JOptionPane.YES_NO_OPTION);
        if(closeDialogResult == JOptionPane.YES_OPTION){
            // Debug Statement
            if (isDebugRunning) {
                System.out.println("Debug: " + "Application Closed");
            }
            System.exit(0);
        }
    }//GEN-LAST:event_btn_closeActionPerformed

    private void btn_minimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_minimizeActionPerformed
        // Minimize Application
        
        // Debug Statement
        if (isDebugRunning) {
            System.out.println("Debug: " + "Application Minimized");
        }
        
        setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_btn_minimizeActionPerformed

    private void btn_setActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_setActionPerformed
        JFileChooser filechooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Bless Game exe","exe");
        filechooser.setFileFilter(filter);
        //filechooser.showOpenDialog(this);
        //File file = filechooser.getSelectedFile();
        
        if (filechooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            // Debug Statement
            if (isDebugRunning) {
                System.out.println("Debug: " + "getSelectedFile() : " +  filechooser.getSelectedFile());
            }
            
            Main.iReadini.put("general", "pathset", true);
            try {
                Main.iReadini.store( new FileOutputStream(sWorkingPath + "/" + sIniFileName));
            } catch (IOException ex) {

            }
            
            Main.iReadini.put("general", "path", filechooser.getSelectedFile());
            try {
                Main.iReadini.store( new FileOutputStream(sWorkingPath + "/" + sIniFileName));
            } catch (IOException ex) {

            }

            java.awt.EventQueue.invokeLater(() -> {
                directoryAnchor.setText(filechooser.getSelectedFile().toString());
            });

        } else {
            // Debug Statement
            if (isDebugRunning) {
                System.out.println("Debug: " + "No file selected");
            }
        }
        
        Boolean pathSetState = iReadini.get("general", "pathset", Boolean.class);
        String pathLocation = iReadini.get("general", "path", String.class);
        
        String baseEngineLoc = pathLocation.substring(0, pathLocation.length() - 24);
        baseEngineLoc = baseEngineLoc + "Engine\\Config\\BaseEngine.ini";
        
        String baseSystemLoc = pathLocation.substring(0, pathLocation.length() - 24);
        baseSystemLoc = baseSystemLoc + "Engine\\Config\\BaseSystemSettings.ini";
        // Debug Statement
        if (isDebugRunning) {
            System.out.println("Debug: " + "BaseEngine Path = " + pathLocation);
        }
        
        if (pathSetState) {
            iReadini = new Ini();
                try {
                    iReadini.load(new FileReader(sWorkingPath + "/" + sIniFileName));
                } catch (IOException ex) {

                }
                String sGamePath = iReadini.get("general", "path", String.class);
                directoryAnchor.setText(sGamePath);

                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "BaseEngine Path = " + pathLocation);
                }

                iBaseEngine = new Wini();
                Config config = new Config();
                config.setMultiOption(true);
                config.setMultiSection(true);
                iBaseEngine.setConfig(config);
                try {
                    iBaseEngine = new Wini(new File(baseEngineLoc));
                } catch (FileNotFoundException ex) {
                    // Debug Statement
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "BaseEngine ini not found");
                    }
                } catch (InvalidFileFormatException ex) {
                    // Debug Statement
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "BaseEngine Not Correct Format");
                    }
                } catch (IOException ex) {
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "General Error");
                    }
                }
                // bSmoothFrameRate
                String bSmooth = iBaseEngine.get("Engine.Engine", "bSmoothFrameRate", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "bSmoothFrameRate = " + bSmooth);
                }
                fld_frameRate.setText(bSmooth);

                // MinSmoothedFrameRate
                int minSmooth = iBaseEngine.get("Engine.Engine", "MinSmoothedFrameRate", int.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "MinSmoothedFrameRate = " + minSmooth);
                }
                fld_minSmoothedFrame.setText(String.valueOf(minSmooth));

                // MaxSmoothedFrameRate
                int maxSmooth = iBaseEngine.get("Engine.Engine", "MaxSmoothedFrameRate", int.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "MaxSmoothedFrameRate = " + maxSmooth);
                }
                fld_maxSmoothedFrame.setText(String.valueOf(maxSmooth));

                // bStaticDecalsEnabled
                String bStatic = iBaseEngine.get("Engine.Engine", "bStaticDecalsEnabled", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "bStaticDecalsEnabled = " + bStatic);
                }
                fld_staticDecals.setText(bStatic);

                // bDynamicDecalsEnabled
                String bDynamic = iBaseEngine.get("Engine.Engine", "bDynamicDecalsEnabled", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "bDynamicDecalsEnabled = " + bDynamic);
                }
                fld_dynamicDecals.setText(bDynamic);

                // bDisablePhysXHardwareSupport
                String bDisable = iBaseEngine.get("Engine.Engine", "bDisablePhysXHardwareSupport", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "bDisablePhysXHardwareSupport = " + bDisable);
                }
                fld_disablePhysX.setText(bDisable);

                // PoolSize
                int poolSize = iBaseEngine.get("TextureStreaming", "PoolSize", int.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "PoolSize = " + poolSize);
                }
                fld_poolSize.setText(String.valueOf(poolSize));

                // memoryMargin
                int memoryMargin = iBaseEngine.get("TextureStreaming", "MemoryMargin", int.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "MemoryMargin = " + memoryMargin);
                }
                fld_memoryMargin.setText(String.valueOf(memoryMargin));

                // ThreadedShaderCompileThreshold
                int threadedShade = iBaseEngine.get("DevOptions.Shaders", "ThreadedShaderCompileThreshold", int.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "ThreadedShaderCompileThreshold = " + threadedShade);
                }
                fld_threadedShader.setText(String.valueOf(threadedShade));
                
                iBaseSystem = new Wini();
                Config sysConfig = new Config();
                sysConfig.setMultiOption(true);
                sysConfig.setMultiSection(true);
                iBaseSystem.setConfig(sysConfig);
                try {
                    iBaseSystem = new Wini(new File(baseSystemLoc));
                } catch (FileNotFoundException ex) {
                    // Debug Statement
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "BaseEngine ini not found");
                    }
                } catch (InvalidFileFormatException ex) {
                    // Debug Statement
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "BaseEngine Not Correct Format");
                    }
                } catch (IOException ex) {
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "General Error");
                    }
                }

                // MotionBlur
                String sMotion = iBaseSystem.get("SystemSettings", "MotionBlur", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "MotionBlur = " + sMotion);
                }
                fld_motionBlur.setText(sMotion);

                // Distortion
                String sDistortion = iBaseSystem.get("SystemSettings", "Distortion", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "Distortion = " + sDistortion);
                }
                fld_distortion.setText(sDistortion);

                // DynamicShadows
                String LightEnvironmentShadows = iBaseSystem.get("SystemSettings", "LightEnvironmentShadows", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "LightEnvironmentShadows = " + LightEnvironmentShadows);
                }
                fld_lightEnv.setText(LightEnvironmentShadows);

                // FogVolumes
                String sFogVolumes = iBaseSystem.get("SystemSettings", "FogVolumes", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "FogVolumes = " + sFogVolumes);
                }
                fld_fogVolumes.setText(sFogVolumes);

                // StaticDecals
                String sStaticDecals = iBaseSystem.get("SystemSettings", "StaticDecals", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "StaticDecals = " + sStaticDecals);
                }
                fld_staticDecalsBase.setText(sStaticDecals);
            
        } else {
            // Debug Statement
            if (isDebugRunning) {
                System.out.println("Debug: " + "Path is NOT set");
            }
        }
    }//GEN-LAST:event_btn_setActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        iReadini = new Ini();
        try {
            iReadini.load(new FileReader(sWorkingPath + "/" + sIniFileName));
        } catch (IOException ex) {
            
        }
        
        Boolean pathSetState = iReadini.get("general", "pathset", Boolean.class);
        String pathLocation = iReadini.get("general", "path", String.class);
        
        String baseEngineLoc = pathLocation.substring(0, pathLocation.length() - 24);
        baseEngineLoc = baseEngineLoc + "Engine\\Config\\BaseEngine.ini";
        
        if (pathSetState) {
            // Debug Statement
            if (isDebugRunning) {
                System.out.println("Debug: " + "Settings Saved");
            }

            try {
                // bSmoothFrameRate
                setVariableEngine(219, "bSmoothFrameRate=" + fld_frameRate.getText());
                setVariableEngine(555, "bSmoothFrameRate=" + fld_frameRate.getText());
                
                // MinSmoothedFrameRate
                setVariableEngine(220, "MinSmoothedFrameRate=" + fld_minSmoothedFrame.getText());
                setVariableEngine(556, "MinSmoothedFrameRate=" + fld_minSmoothedFrame.getText());
                
                // MaxSmoothedFrameRate
                setVariableEngine(221, "MaxSmoothedFrameRate=" + fld_maxSmoothedFrame.getText());
                setVariableEngine(557, "MaxSmoothedFrameRate=" + fld_maxSmoothedFrame.getText());
                
                // bStaticDecalsEnabled
                setVariableEngine(134, "bStaticDecalsEnabled=" + fld_staticDecals.getText());

                // bDynamicDecalsEnabled
                setVariableEngine(135, "bDynamicDecalsEnabled=" + fld_dynamicDecals.getText());
                
                // bDisablePhysXHardwareSupport
                setVariableEngine(193, "bDisablePhysXHardwareSupport=" + fld_disablePhysX.getText());
                
                // PoolSize
                setVariableEngine(471, "PoolSize=" + fld_poolSize.getText());
                
                // MemoryMargin
                setVariableEngine(472, "MemoryMargin=" + fld_memoryMargin.getText());
                
                // ThreadedShaderCompileThreshold
                setVariableEngine(586, "ThreadedShaderCompileThreshold=" + fld_threadedShader.getText());
                
                // MotionBlur
                setVariableSystem(13, "MotionBlur=" + fld_motionBlur.getText());
                setVariableSystem(317, "MotionBlur=" + fld_motionBlur.getText());
                setVariableSystem(434, "MotionBlur=" + fld_motionBlur.getText());
                setVariableSystem(451, "MotionBlur=" + fld_motionBlur.getText());
                
                // Distortion
                setVariableSystem(20, "Distortion=" + fld_distortion.getText());
                setVariableSystem(322, "Distortion=" + fld_distortion.getText());
                setVariableSystem(439, "Distortion=" + fld_distortion.getText());
                setVariableSystem(456, "Distortion=" + fld_distortion.getText());
                
                // LightEnvironmentShadows
                setVariableSystem(9, "LightEnvironmentShadows=" + fld_lightEnv.getText());
                
                // FogVolumes
                setVariableSystem(28, "FogVolumes=" + fld_fogVolumes.getText());
                
                // StaticDecals
                setVariableSystem(3, "StaticDecals=" + fld_staticDecalsBase.getText());
                setVariableSystem(313, "StaticDecals=" + fld_staticDecalsBase.getText());
                
            } catch (IOException ex) {
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "Unable to write to BaseEngine.ini");
                }
            }

            JOptionPane.showMessageDialog(null, "Settings saved successfully");
        } else {
            JOptionPane.showMessageDialog(null, "Game exe currently not set or file is not set to read/write");
        }

    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_restoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_restoreActionPerformed
        // Debug Statement
        if (isDebugRunning) {
            System.out.println("Debug: " + "Defaults Restored");
        }
        fld_disablePhysX.setText("TRUE");
        fld_dynamicDecals.setText("TRUE");
        fld_frameRate.setText("TRUE");
        fld_maxSmoothedFrame.setText("62");
        fld_memoryMargin.setText("20");
        fld_minSmoothedFrame.setText("22");
        fld_poolSize.setText("160");
        fld_staticDecals.setText("TRUE");
        fld_threadedShader.setText("1");
        fld_motionBlur.setText("True");
        fld_distortion.setText("True");
        fld_lightEnv.setText("True");
        fld_fogVolumes.setText("True");
        fld_staticDecalsBase.setText("True");
    
        JOptionPane.showMessageDialog(null, "Defaults restored, don't forget to save.");
    }//GEN-LAST:event_btn_restoreActionPerformed

    private void btn_fovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_fovActionPerformed
        // Debug Statement
        if (isDebugRunning) {
            System.out.println("Debug: " + "FOV Fix Clicked");
        }
        
        iReadini = new Ini();
        try {
            iReadini.load(new FileReader(sWorkingPath + "/" + sIniFileName));
        } catch (IOException ex) {
            
        }
        
        Boolean pathSetState = iReadini.get("general", "pathset", Boolean.class);
        String pathLocation = iReadini.get("general", "path", String.class);
        
        String baseEngineLoc = pathLocation.substring(0, pathLocation.length() - 24);
        baseEngineLoc = baseEngineLoc + "Engine\\Config\\BaseEngine.ini";
        
        if (pathSetState) {
        
            Boolean fovFix = iReadini.get("general", "fovfix", Boolean.class);

            if (!fovFix) {
                try {
                    setVariableEngine(890, "AspectRatioAxisConstraint=AspectRatio_MaintainYFOV");
                } catch (IOException ex) {
                    
                }

                JOptionPane.showMessageDialog(null, "FOV & Ultrawide Fix = Enabled");
                fovFix = true;
            } else {
                try {
                    setVariableEngine(890, "AspectRatioAxisConstraint=AspectRatio_MaintainXFOV");
                } catch (IOException ex) {
                    
                }

                JOptionPane.showMessageDialog(null, "FOV & Ultrawide Fix = Disabled");
                fovFix = false;
            }

            Main.iReadini.put("general", "fovfix", fovFix);
            try {
                Main.iReadini.store( new FileOutputStream(sWorkingPath + "/" + sIniFileName));
            } catch (IOException ex) {

            }
        } else {
            JOptionPane.showMessageDialog(null, "Game exe currently not set or file is not set to read/write");
        }
    }//GEN-LAST:event_btn_fovActionPerformed

    private void btn_mouseSmoothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mouseSmoothActionPerformed
        iReadini = new Ini();
        try {
            iReadini.load(new FileReader(sWorkingPath + "/" + sIniFileName));
        } catch (IOException ex) {
            
        }
        
        Boolean pathSetState = iReadini.get("general", "pathset", Boolean.class);
        String pathLocation = iReadini.get("general", "path", String.class);
        
        String baseInputLoc = pathLocation.substring(0, pathLocation.length() - 24);
        baseInputLoc = baseInputLoc + "Engine\\Config\\BaseInput.ini";
        
        if (pathSetState) {
            mouseSmooth = iReadini.get("general", "mousesmoothing", Boolean.class);

            if (mouseSmooth) {
                try {
                    setVariableInput(8, "bEnableMouseSmoothing=false");
                } catch (IOException ex) {
                    
                }

                JOptionPane.showMessageDialog(null, "Mouse Smoothing = Disabled");
                mouseSmooth = false;
            } else {
                try {
                    setVariableInput(8, "bEnableMouseSmoothing=true");
                } catch (IOException ex) {
                    
                }

                JOptionPane.showMessageDialog(null, "Mouse Smoothing = Enabled");
                mouseSmooth = true;
            }

            Main.iReadini.put("general", "mousesmoothing", mouseSmooth);
            try {
                Main.iReadini.store( new FileOutputStream(sWorkingPath + "/" + sIniFileName));
            } catch (IOException ex) {

            }
        } else {
            JOptionPane.showMessageDialog(null, "Game exe currently not set or file is not set to read/write");
        }
    }//GEN-LAST:event_btn_mouseSmoothActionPerformed

    private void btn_vertMouseFixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_vertMouseFixActionPerformed
        iReadini = new Ini();
        try {
            iReadini.load(new FileReader(sWorkingPath + "/" + sIniFileName));
        } catch (IOException ex) {
            
        }
        
        Boolean pathSetState = iReadini.get("general", "pathset", Boolean.class);
        String pathLocation = iReadini.get("general", "path", String.class);
        
        String baseInputLoc = pathLocation.substring(0, pathLocation.length() - 24);
        baseInputLoc = baseInputLoc + "Engine\\Config\\BaseInput.ini";
        
        if (pathSetState) {
            lookupFix = iReadini.get("general", "lookupscalefix", Boolean.class);

            if (!lookupFix) {
                try {
                    setVariableInput(5, "LookUpScale=-300");
                } catch (IOException ex) {
                    
                }

                JOptionPane.showMessageDialog(null, "Mouse vertical movement fix = Enabled");
                lookupFix = true;
            } else {
                try {
                    setVariableInput(5, "LookUpScale=-250");
                } catch (IOException ex) {
                    
                }

                JOptionPane.showMessageDialog(null, "Mouse vertical movement fix = Disabled");
                lookupFix = false;
            }

            Main.iReadini.put("general", "lookupscalefix", lookupFix);
            try {
                Main.iReadini.store( new FileOutputStream(sWorkingPath + "/" + sIniFileName));
            } catch (IOException ex) {

            }
        } else {
            JOptionPane.showMessageDialog(null, "Game exe currently not set or file is not set to read/write");
        }
    }//GEN-LAST:event_btn_vertMouseFixActionPerformed

    public static void setVariableEngine(int lineNumber, String data) throws IOException {
        iReadini = new Ini();
        try {
            iReadini.load(new FileReader(sWorkingPath + "/" + sIniFileName));
        } catch (IOException ex) {
            
        }
        
        Boolean pathSetState = iReadini.get("general", "pathset", Boolean.class);
        String pathLocation = iReadini.get("general", "path", String.class);
        
        String baseEngineLoc = pathLocation.substring(0, pathLocation.length() - 24);
        baseEngineLoc = baseEngineLoc + "Engine\\Config\\BaseEngine.ini";
        
        Path path = Paths.get(baseEngineLoc);
        List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);
        lines.set(lineNumber - 1, data);
        Files.write(path, lines, StandardCharsets.UTF_8);
    }
    
    public static void setVariableSystem(int lineNumber, String data) throws IOException {
        iReadini = new Ini();
        try {
            iReadini.load(new FileReader(sWorkingPath + "/" + sIniFileName));
        } catch (IOException ex) {
            
        }
        
        Boolean pathSetState = iReadini.get("general", "pathset", Boolean.class);
        String pathLocation = iReadini.get("general", "path", String.class);
        
        String baseSystemLoc = pathLocation.substring(0, pathLocation.length() - 24);
        baseSystemLoc = baseSystemLoc + "Engine\\Config\\BaseSystemSettings.ini";
        
        Path path = Paths.get(baseSystemLoc);
        List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);
        lines.set(lineNumber - 1, data);
        Files.write(path, lines, StandardCharsets.UTF_8);
    }
    
    public static void setVariableInput(int lineNumber, String data) throws IOException {
        iReadini = new Ini();
        try {
            iReadini.load(new FileReader(sWorkingPath + "/" + sIniFileName));
        } catch (IOException ex) {
            
        }
        
        Boolean pathSetState = iReadini.get("general", "pathset", Boolean.class);
        String pathLocation = iReadini.get("general", "path", String.class);
        
        String baseInputLoc = pathLocation.substring(0, pathLocation.length() - 24);
        baseInputLoc = baseInputLoc + "Engine\\Config\\BaseInput.ini";
        
        Path path = Paths.get(baseInputLoc);
        List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);
        lines.set(lineNumber - 1, data);
        Files.write(path, lines, StandardCharsets.UTF_8);
    }
    
    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        // Debug Statement
        if (isDebugRunning) {
            System.out.println("Debug: " + "Application Launched");
        }
        
        // Debug Statement
        if (isDebugRunning) {
            System.out.println("Debug: " + "Working Path = " + sWorkingPath);
        }
        
        File iniCheck = new File(sWorkingPath + "/" + sIniFileName);
        
        if (!iniCheck.exists()) {    
            // Debug Statement
            if (isDebugRunning) {
                System.out.println("Debug: " + "Settings.ini does not exist");
            }
            
            List<String> iniData = Arrays.asList(
                "[general]", "version = 0.0", "autocheck = false", "pathset = false", "path =", "fovfix = false", "mousesmoothing = true", "lookupscalefix = false"
            );

            Path iniFile = Paths.get(sWorkingPath + "/" + sIniFileName);

            Files.write(iniFile, iniData, Charset.forName("UTF-8"));
            
        } else {
            // Debug Statement
            if (isDebugRunning) {
                System.out.println("Debug: " + "Settings.ini found");
            }
        }
        
        iReadini = new Ini();
        iReadini.load(new FileReader(sWorkingPath + "/" + sIniFileName));
        
        Boolean pathSetState = iReadini.get("general", "pathset", Boolean.class);
        
        if (!pathSetState) {
            // Debug Statement
            if (isDebugRunning) {
                System.out.println("Debug: " + "Default directory path not set");
            }

        } else {
            // Debug Statement
            if (isDebugRunning) {
                System.out.println("Debug: " + "Path is set.");
            }
            
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
        
        java.awt.EventQueue.invokeLater(() -> {
            if (pathSetState) {
                iReadini = new Ini();
                try {
                    iReadini.load(new FileReader(sWorkingPath + "/" + sIniFileName));
                } catch (IOException ex) {

                }
                String sGamePath = iReadini.get("general", "path", String.class);
                directoryAnchor.setText(sGamePath);
                
                String pathLocation = iReadini.get("general", "path", String.class);
        
                String baseEngineLoc = pathLocation.substring(0, pathLocation.length() - 24);
                baseEngineLoc = baseEngineLoc + "Engine\\Config\\BaseEngine.ini";
                
                String baseSystemLoc = pathLocation.substring(0, pathLocation.length() - 24);
                baseSystemLoc = baseSystemLoc + "Engine\\Config\\BaseSystemSettings.ini";

                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "BaseEngine Path = " + pathLocation);
                }

                iBaseEngine = new Wini();
                Config config = new Config();
                config.setMultiOption(true);
                config.setMultiSection(true);
                iBaseEngine.setConfig(config);
                try {
                    iBaseEngine = new Wini(new File(baseEngineLoc));
                } catch (FileNotFoundException ex) {
                    // Debug Statement
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "BaseEngine ini not found");
                    }
                } catch (InvalidFileFormatException ex) {
                    // Debug Statement
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "BaseEngine Not Correct Format");
                    }
                } catch (IOException ex) {
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "General Error");
                    }
                }
                // bSmoothFrameRate
                String bSmooth = iBaseEngine.get("Engine.Engine", "bSmoothFrameRate", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "bSmoothFrameRate = " + bSmooth);
                }
                fld_frameRate.setText(bSmooth);

                // MinSmoothedFrameRate
                int minSmooth = iBaseEngine.get("Engine.Engine", "MinSmoothedFrameRate", int.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "MinSmoothedFrameRate = " + minSmooth);
                }
                fld_minSmoothedFrame.setText(String.valueOf(minSmooth));

                // MaxSmoothedFrameRate
                int maxSmooth = iBaseEngine.get("Engine.Engine", "MaxSmoothedFrameRate", int.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "MaxSmoothedFrameRate = " + maxSmooth);
                }
                fld_maxSmoothedFrame.setText(String.valueOf(maxSmooth));

                // bStaticDecalsEnabled
                String bStatic = iBaseEngine.get("Engine.Engine", "bStaticDecalsEnabled", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "bStaticDecalsEnabled = " + bStatic);
                }
                fld_staticDecals.setText(bStatic);

                // bDynamicDecalsEnabled
                String bDynamic = iBaseEngine.get("Engine.Engine", "bDynamicDecalsEnabled", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "bDynamicDecalsEnabled = " + bDynamic);
                }
                fld_dynamicDecals.setText(bDynamic);

                // bDisablePhysXHardwareSupport
                String bDisable = iBaseEngine.get("Engine.Engine", "bDisablePhysXHardwareSupport", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "bDisablePhysXHardwareSupport = " + bDisable);
                }
                fld_disablePhysX.setText(bDisable);

                // PoolSize
                int poolSize = iBaseEngine.get("TextureStreaming", "PoolSize", int.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "PoolSize = " + poolSize);
                }
                fld_poolSize.setText(String.valueOf(poolSize));

                // memoryMargin
                int memoryMargin = iBaseEngine.get("TextureStreaming", "MemoryMargin", int.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "MemoryMargin = " + memoryMargin);
                }
                fld_memoryMargin.setText(String.valueOf(memoryMargin));

                // ThreadedShaderCompileThreshold
                int threadedShade = iBaseEngine.get("DevOptions.Shaders", "ThreadedShaderCompileThreshold", int.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "ThreadedShaderCompileThreshold = " + threadedShade);
                }
                fld_threadedShader.setText(String.valueOf(threadedShade));
                
                iBaseSystem = new Wini();
                Config sysConfig = new Config();
                sysConfig.setMultiOption(true);
                sysConfig.setMultiSection(true);
                iBaseSystem.setConfig(sysConfig);
                try {
                    iBaseSystem = new Wini(new File(baseSystemLoc));
                } catch (FileNotFoundException ex) {
                    // Debug Statement
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "BaseEngine ini not found");
                    }
                } catch (InvalidFileFormatException ex) {
                    // Debug Statement
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "BaseEngine Not Correct Format");
                    }
                } catch (IOException ex) {
                    if (isDebugRunning) {
                        System.out.println("Debug: " + "General Error");
                    }
                }

                // MotionBlur
                String sMotion = iBaseSystem.get("SystemSettings", "MotionBlur", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "MotionBlur = " + sMotion);
                }
                fld_motionBlur.setText(sMotion);

                // Distortion
                String sDistortion = iBaseSystem.get("SystemSettings", "Distortion", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "Distortion = " + sDistortion);
                }
                fld_distortion.setText(sDistortion);

                // DynamicShadows
                String LightEnvironmentShadows = iBaseSystem.get("SystemSettings", "LightEnvironmentShadows", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "LightEnvironmentShadows = " + LightEnvironmentShadows);
                }
                fld_lightEnv.setText(LightEnvironmentShadows);

                // FogVolumes
                String sFogVolumes = iBaseSystem.get("SystemSettings", "FogVolumes", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "FogVolumes = " + sFogVolumes);
                }
                fld_fogVolumes.setText(sFogVolumes);

                // StaticDecals
                String sStaticDecals = iBaseSystem.get("SystemSettings", "StaticDecals", String.class);
                // Debug Statement
                if (isDebugRunning) {
                    System.out.println("Debug: " + "StaticDecals = " + sStaticDecals);
                }
                fld_staticDecalsBase.setText(sStaticDecals);
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel body_background;
    private javax.swing.JButton btn_close;
    private javax.swing.JButton btn_fov;
    private javax.swing.JButton btn_minimize;
    private javax.swing.JButton btn_mouseSmooth;
    private javax.swing.JButton btn_restore;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_set;
    private javax.swing.JButton btn_vertMouseFix;
    private static javax.swing.JTextField directoryAnchor;
    private static javax.swing.JTextField fld_disablePhysX;
    private static javax.swing.JTextField fld_distortion;
    private static javax.swing.JTextField fld_dynamicDecals;
    private static javax.swing.JTextField fld_fogVolumes;
    private static javax.swing.JTextField fld_frameRate;
    private static javax.swing.JTextField fld_lightEnv;
    private static javax.swing.JTextField fld_maxSmoothedFrame;
    private static javax.swing.JTextField fld_memoryMargin;
    private static javax.swing.JTextField fld_minSmoothedFrame;
    private static javax.swing.JTextField fld_motionBlur;
    private static javax.swing.JTextField fld_poolSize;
    private static javax.swing.JTextField fld_staticDecals;
    private static javax.swing.JTextField fld_staticDecalsBase;
    private static javax.swing.JTextField fld_threadedShader;
    private javax.swing.JLabel headerText;
    private javax.swing.JLabel title_frameRate;
    private javax.swing.JLabel title_general;
    private javax.swing.JLabel title_optional;
    private javax.swing.JLabel txt_disablePhysX;
    private javax.swing.JLabel txt_distortion;
    private javax.swing.JLabel txt_dynamicDecals;
    private javax.swing.JLabel txt_fogVolumes;
    private javax.swing.JLabel txt_frameRate;
    private javax.swing.JLabel txt_lightEnv;
    private javax.swing.JLabel txt_maxSmoothedFrame;
    private javax.swing.JLabel txt_memoryMargin;
    private javax.swing.JLabel txt_minSmoothedFrame;
    private javax.swing.JLabel txt_motionBlur;
    private javax.swing.JLabel txt_notice0;
    private javax.swing.JLabel txt_notice1;
    private javax.swing.JLabel txt_or;
    private javax.swing.JLabel txt_poolSize;
    private javax.swing.JLabel txt_staticDecals;
    private javax.swing.JLabel txt_staticDecalsBase;
    private javax.swing.JLabel txt_threadedShader;
    // End of variables declaration//GEN-END:variables
}
